package com.curso.ESPE.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.curso.ESPE.entity.CursoEstudiante;
import com.curso.ESPE.exception.CursoNotFoundException;
import com.curso.ESPE.exception.EstudianteNotFoundException;
import com.curso.ESPE.model.Estudiante;
import com.curso.ESPE.service.CursoEstudianteService;

@RestController
@RequestMapping("/cursos")
public class CursoEstudianteController {

    
    @Autowired
    private CursoEstudianteService cursoEstudianteService;

    // Inscribir un estudiante en un curso
    @PostMapping("/{cursoId}/estudiantes/{estudianteId}")
    public ResponseEntity<?> inscribirEstudianteEnCurso(
            @PathVariable Long cursoId, @PathVariable Long estudianteId) {
        try {
            CursoEstudiante cursoEstudiante = cursoEstudianteService.inscribirEstudianteEnCurso(cursoId, estudianteId);
            return new ResponseEntity<>(cursoEstudiante, HttpStatus.CREATED);
        } catch (CursoNotFoundException | EstudianteNotFoundException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        } catch (RuntimeException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.BAD_REQUEST);
        }
    }

    // Obtener todos los estudiantes inscritos en un curso
    @GetMapping("/{cursoId}/estudiantes")
    public ResponseEntity<List<Estudiante>> obtenerEstudiantesEnCurso(@PathVariable Long cursoId) {
        try {
            List<Estudiante> estudiantes = cursoEstudianteService.obtenerEstudiantesEnCurso(cursoId);
            return new ResponseEntity<>(estudiantes, HttpStatus.OK);
        } catch (RuntimeException e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // Obtener estudiantes no inscritos en un curso
    @GetMapping("/{cursoId}/estudiantes/no-inscritos")
    public ResponseEntity<List<Estudiante>> obtenerEstudiantesNoInscritosEnCurso(@PathVariable Long cursoId) {
        try {
            List<Estudiante> estudiantes = cursoEstudianteService.obtenerEstudiantesNoInscritosEnCurso(cursoId);
            return new ResponseEntity<>(estudiantes, HttpStatus.OK);
        } catch (RuntimeException e) {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // Eliminar un estudiante de un curso
    @DeleteMapping("/{cursoId}/estudiantes/{estudianteId}")
    public ResponseEntity<?> eliminarEstudianteDeCurso(
            @PathVariable Long cursoId, @PathVariable Long estudianteId) {
        try {
            cursoEstudianteService.eliminarEstudianteDeCurso(cursoId, estudianteId);
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        } catch (RuntimeException e) {
            return new ResponseEntity<>(e.getMessage(), HttpStatus.NOT_FOUND);
        }
    }
}